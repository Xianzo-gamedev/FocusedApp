# Workflow to build your Android APK for debug and pull requests
# This workflow is separate from your release workflow (main.yml)

name: Build Android APK

on:
  push:
    branches: [ main, master ] # Triggers on pushes to main or master branches
  pull_request:
    branches: [ main, master ] # Triggers on pull requests targeting main or master
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

jobs:
  build:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner for the job

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Checks out your repository code

    - name: Set up Python 3.9
      uses: actions/setup-python@v4 # Sets up Python 3.9 environment
      with:
        python-version: 3.9

    - name: Install system dependencies
      # This step installs necessary system-level packages for building Android apps with Python.
      # Crucially, 'automake' and 'libtool' are added here to fix the 'LT_SYS_SYMBOL_USCORE' error.
      run: |
        sudo apt update # Updates the package list
        sudo apt install -y python3-dev libffi-dev libssl-dev git unzip default-jdk automake libtool
        # python3-dev: Python header files for compiling C extensions
        # libffi-dev, libssl-dev: Common dependencies for various Python libraries
        # git, unzip, default-jdk: Essential tools for Android build process
        # automake, libtool: Tools required for compiling native libraries that use Autotools
        
    - name: Install Python dependencies
      # Installs Python packages required for Buildozer to function.
      run: |
        python -m pip install --upgrade pip # Upgrades pip to the latest version
        pip install buildozer # Installs Buildozer, the tool to package Python apps for Android
        pip install cython # Installs Cython, often used by Kivy/KivyMD for performance

    - name: Build Android APK
      # This step executes Buildozer to create the Android debug APK.
      run: |
        # Accept Android licenses (required for the first build)
        mkdir -p ~/.android # Ensures the .android directory exists
        echo "y" | buildozer android debug # Runs Buildozer to build a debug APK
      env:
        # These environment variables point to the Android SDK location on the runner.
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        ANDROID_HOME: /usr/local/lib/android/sdk

    - name: Upload APK
      # Uploads the generated APK as a workflow artifact, making it downloadable from the Actions tab.
      uses: actions/upload-artifact@v4 # Using v4 as recommended to avoid deprecation warnings
      with:
        name: focusapp-debug-apk # Name of the artifact
        path: bin/*.apk # Path to the generated APK file (Buildozer puts it in the 'bin' directory)

    - name: Upload build logs
      # Uploads the Buildozer logs as an artifact, useful for debugging failures.
      uses: actions/upload-artifact@v4 # Using v4 as recommended
      if: always() # Ensures this step runs even if previous steps fail
      with:
        name: build-logs # Name of the logs artifact
        path: .buildozer/android/platform/build-*/ # Path to Buildozer's build logs
